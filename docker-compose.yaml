version: '3.5'

services:
  kafka-cluster:
    image: landoop/fast-data-dev:latest
    environment:
      KAFKA_LOG_MESSAGE_TIMESTAMP_TYPE: LogAppendTime
      ADV_HOST: host.docker.internal  # Change to 192.168.99.100 if using Docker Toolbox
      RUNTESTS: 0                     # Disable Running tests so the cluster starts faster
      DISABLE: rabbitmq,hive,pulsar,azure-documentdb,blockchain,bloomberg,cassandra,coap,druid,elastic,elastic5,elastic6,ftp,hazelcast,hbase,influxdb,jms,kudu,mongodb,mqtt,redis,rethink,voltdb,yahoo,hdfs,jdbc,elasticsearch,s3,twitter
    ports:
      - 2181:2181                 # Zookeeper
      - 3030:3030                 # Landoop UI
      - 8081-8083:8081-8083       # REST Proxy, Schema Registry, Kafka Connect ports
      - 9581-9585:9581-9585       # JMX Ports
      - 9092:9092                 # Kafka Broker
    volumes:
      - ./../kafka-connect-tile38-sink/target/kafka-connect-tile38-sink-1.0-SNAPSHOT-package/share/java/kafka-connect-tile38-sink:/connectors/Tile38
    links:
      - tile38
    networks:
      - kafkastreams-network
      
  ksql-server:
    image: confluentinc/cp-ksql-server
    volumes:
      - ./ksql:/usr/ext #mounts a custom UDF jar for ksql
    environment:
      KSQL_KSQL_EXTENTION_DIR: "/usr/ext"
      KSQL_BOOTSTRAP_SERVERS: host.docker.internal:9092
      KSQL_LISTENERS: http://0.0.0.0:8088
    networks:
      - kafkastreams-network
      
  ksql-cli:
    image: confluentinc/cp-ksql-cli
    depends_on:
      - ksql-server
    entrypoint: /bin/sh
    tty: true
    networks:
      - kafkastreams-network

  tile38:
    image: tile38/tile38
    ports:
      - "9851:9851"
    networks:
      - kafkastreams-network

  source:
    image: leonardobonacci/train-source:1.0
    build:
      context: source
      dockerfile: src/main/docker/Dockerfile.${QUARKUS_MODE:-jvm}
    environment:
      KAFKA_BOOTSTRAP_SERVERS: host.docker.internal:9092
    networks:
      - kafkastreams-network

  exploder:
    image: leonardobonacci/train-exploder:1.0
    build:
      context: exploder
      dockerfile: src/main/docker/Dockerfile.${QUARKUS_MODE:-jvm}
    environment:
      QUARKUS_KAFKA_STREAMS_BOOTSTRAP_SERVERS: host.docker.internal:9092
    networks:
      - kafkastreams-network

#  arrivals:
#    image: leonardobonacci/train-arrival-processor:1.0
#    build:
#      context: arrival-processor
#      dockerfile: src/main/docker/Dockerfile.${QUARKUS_MODE:-jvm}
#    environment:
#      QUARKUS_KAFKA_STREAMS_BOOTSTRAP_SERVERS: kafka:9092
#    networks:
#      - kafkastreams-network

#  averager:
#    image: leonardobonacci/train-average-aggregator:1.0
#    build:
#      context: averager
#      dockerfile: src/main/docker/Dockerfile.${QUARKUS_MODE:-jvm}
#    environment:
#      QUARKUS_KAFKA_STREAMS_BOOTSTRAP_SERVERS: kafka:9092
#    networks:
#      - kafkastreams-network
#   - kafkastreams-network

#  predictor:
#    image: leonardobonacci/train-time-predictor:1.0
#    build:
#      context: predictor
#      dockerfile: src/main/docker/Dockerfile.${QUARKUS_MODE:-jvm}
#    environment:
#      QUARKUS_KAFKA_STREAMS_BOOTSTRAP_SERVERS: kafka:9092
#    networks:
#      - kafkastreams-network
#      
#  sink:
#    image: leonardobonacci/train-station-sink:1.0
#    build:
#      context: station-sink
#      dockerfile: src/main/docker/Dockerfile.${QUARKUS_MODE:-jvm}
#    environment:
#      QUARKUS_KAFKA_STREAMS_BOOTSTRAP_SERVERS: kafka:9092
#    networks:
#      - kafkastreams-network
     
networks:
  kafkastreams-network:
    name: ks
    
